//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by validation-gen. DO NOT EDIT.

package v1alpha1

import (
	fmt "fmt"

	validate "k8s.io/apimachinery/pkg/api/validate"
	runtime "k8s.io/apimachinery/pkg/runtime"
	field "k8s.io/apimachinery/pkg/util/validation/field"
)

func init() { localSchemeBuilder.Register(RegisterValidations) }

// RegisterValidations adds validation functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterValidations(scheme *runtime.Scheme) error {
	scheme.AddValidationFunc(new(Fischer), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Fischer(obj.(*Fischer), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("No validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(FischerList), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_FischerList(obj.(*FischerList), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("No validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(Flunder), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			root := obj.(*Flunder)
			return Validate_FlunderSpec(&root.Spec, nil)
		}
		if len(subresources) == 1 && subresources[0] == "status" {
			root := obj.(*Flunder)
			return Validate_FlunderStatus(&root.Status, nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("No validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(FlunderList), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_FlunderList(obj.(*FlunderList), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("No validation found for %T, subresources: %v", obj, subresources))}
	})
	return nil
}

func Validate_Fischer(obj *Fischer, fldPath *field.Path) (errs field.ErrorList) {
	// field Fischer.TypeMeta has no validation
	// field Fischer.ObjectMeta has no validation
	// field Fischer.DisallowedFlunders has no validation

	// field Fischer.Reference
	errs = append(errs,
		func(obj string, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.IP(fldPath, obj)...)
			return
		}(obj.Reference, fldPath.Child("reference"))...)

	// field Fischer.Primary
	errs = append(errs,
		func(obj Widget, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, Validate_Widget(&obj, fldPath)...)
			return
		}(obj.Primary, fldPath.Child("primary"))...)

	return errs
}

func Validate_FischerList(obj *FischerList, fldPath *field.Path) (errs field.ErrorList) {
	// field FischerList.TypeMeta has no validation
	// field FischerList.ListMeta has no validation

	// field FischerList.Items
	errs = append(errs,
		func(obj []Fischer, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj Fischer, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_Fischer(&obj, fldPath)...)
						return
					}(val, fldPath.Index(i))...)
			}
			return
		}(obj.Items, fldPath.Child("items"))...)

	return errs
}

func Validate_Flunder(obj *Flunder, fldPath *field.Path) (errs field.ErrorList) {
	// field Flunder.TypeMeta has no validation
	// field Flunder.ObjectMeta has no validation

	// field Flunder.Spec
	errs = append(errs,
		func(obj FlunderSpec, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, Validate_FlunderSpec(&obj, fldPath)...)
			return
		}(obj.Spec, fldPath.Child("spec"))...)

	// field Flunder.Status
	errs = append(errs,
		func(obj FlunderStatus, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, Validate_FlunderStatus(&obj, fldPath)...)
			return
		}(obj.Status, fldPath.Child("status"))...)

	return errs
}

func Validate_FlunderList(obj *FlunderList, fldPath *field.Path) (errs field.ErrorList) {
	// field FlunderList.TypeMeta has no validation
	// field FlunderList.ListMeta has no validation

	// field FlunderList.Items
	errs = append(errs,
		func(obj []Flunder, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj Flunder, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_Flunder(&obj, fldPath)...)
						return
					}(val, fldPath.Index(i))...)
			}
			return
		}(obj.Items, fldPath.Child("items"))...)

	return errs
}

func Validate_FlunderSpec(obj *FlunderSpec, fldPath *field.Path) (errs field.ErrorList) {
	// field FlunderSpec.Reference
	errs = append(errs,
		func(obj string, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.MaxLength(fldPath, obj, 128)...)
			errs = append(errs, validate.IP(fldPath, obj)...)
			return
		}(obj.Reference, fldPath.Child("reference"))...)

	// field FlunderSpec.ReferenceType
	errs = append(errs,
		func(obj *ReferenceType, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				errs = append(errs, validate.Enum(fldPath, *obj, "Fischer", "Flunder")...)
			}
			if obj != nil {
				errs = append(errs, Validate_ReferenceType(obj, fldPath)...)
			}
			return
		}(obj.ReferenceType, fldPath.Child("referenceType"))...)

	// field FlunderSpec.Primary
	errs = append(errs,
		func(obj Widget, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, Validate_Widget(&obj, fldPath)...)
			return
		}(obj.Primary, fldPath.Child("primary"))...)

	// field FlunderSpec.Extras
	errs = append(errs,
		func(obj []Widget, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj Widget, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_Widget(&obj, fldPath)...)
						return
					}(val, fldPath.Index(i))...)
			}
			return
		}(obj.Extras, fldPath.Child("extras"))...)

	// field FlunderSpec.More
	errs = append(errs,
		func(obj map[string]Widget, fldPath *field.Path) (errs field.ErrorList) {
			for _, val := range obj {
				errs = append(errs,
					func(obj Widget, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_Widget(&obj, fldPath)...)
						return
					}(val, fldPath.Key(key))...)
			}
			return
		}(obj.More, fldPath.Child("more"))...)

	// field FlunderSpec.Layer
	errs = append(errs,
		func(obj *Layer, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				errs = append(errs, Validate_Layer(obj, fldPath)...)
			}
			return
		}(obj.Layer, fldPath.Child("layer"))...)

	return errs
}

func Validate_FlunderStatus(obj *FlunderStatus, fldPath *field.Path) (errs field.ErrorList) {
	// field FlunderStatus.Name
	errs = append(errs,
		func(obj string, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.IP(fldPath, obj)...)
			return
		}(obj.Name, fldPath.Child("name"))...)

	return errs
}

func Validate_Layer(obj *Layer, fldPath *field.Path) (errs field.ErrorList) {
	// field Layer.Extras
	errs = append(errs,
		func(obj []Widget, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj Widget, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_Widget(&obj, fldPath)...)
						return
					}(val, fldPath.Index(i))...)
			}
			return
		}(obj.Extras, fldPath.Child("extras"))...)

	return errs
}

func Validate_ReferenceType(obj *ReferenceType, fldPath *field.Path) (errs field.ErrorList) {
	// type ReferenceType
	if obj != nil {
		errs = append(errs, validate.Enum(fldPath, *obj, "Fischer", "Flunder")...)
	}

	return errs
}

func Validate_Something(obj *Something, fldPath *field.Path) (errs field.ErrorList) {
	// field Something.Name
	errs = append(errs,
		func(obj string, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.IP(fldPath, obj)...)
			return
		}(obj.Name, fldPath.Child("name"))...)

	return errs
}

func Validate_Widget(obj *Widget, fldPath *field.Path) (errs field.ErrorList) {
	// field Widget.Name
	errs = append(errs,
		func(obj string, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.IP(fldPath, obj)...)
			return
		}(obj.Name, fldPath.Child("name"))...)

	// field Widget.Something
	errs = append(errs,
		func(obj []Something, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj Something, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_Something(&obj, fldPath)...)
						return
					}(val, fldPath.Index(i))...)
			}
			return
		}(obj.Something, fldPath.Child("something"))...)

	return errs
}
