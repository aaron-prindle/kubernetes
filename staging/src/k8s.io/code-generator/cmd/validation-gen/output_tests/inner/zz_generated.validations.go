//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by __debug_bin. DO NOT EDIT.

package inner

import (
	fmt "fmt"

	validate "k8s.io/apimachinery/pkg/api/validate"
	runtime "k8s.io/apimachinery/pkg/runtime"
	field "k8s.io/apimachinery/pkg/util/validation/field"
)

func init() { localSchemeBuilder.Register(RegisterValidations) }

// RegisterValidations adds validation functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterValidations(scheme *runtime.Scheme) error {
	scheme.AddValidationFunc(new(T1), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_T1(obj.(*T1), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("No validation found for %T, subresources: %v", obj, subresources))}
	})
	return nil
}

func Validate_T1(obj *T1, fldPath *field.Path) (errs field.ErrorList) {
	// field T1.TypeMeta has no validation

	// field T1.Simple
	errs = append(errs,
		func(obj struct{ Field string }, fldPath *field.Path) (errs field.ErrorList) {
			// field struct{Field string}.Field
			errs = append(errs,
				func(obj string, fldPath *field.Path) (errs field.ErrorList) {
					errs = append(errs, validate.FixedResult(fldPath, obj, true, "inner T1.Simple.Field")...)
					return
				}(obj.Field, fldPath.Child("field"))...)

			return
		}(obj.Simple, fldPath.Child("simple"))...)

	// field T1.Nested
	errs = append(errs,
		func(obj struct {
			OuterField string
			Inner      struct{ InnerField string }
		}, fldPath *field.Path) (errs field.ErrorList) {
			// field struct{OuterField string; Inner struct{InnerField string}}.OuterField
			errs = append(errs,
				func(obj string, fldPath *field.Path) (errs field.ErrorList) {
					errs = append(errs, validate.FixedResult(fldPath, obj, true, "inner T1.Nested.OuterField")...)
					return
				}(obj.OuterField, fldPath.Child("outerField"))...)

			return
		}(obj.Nested, fldPath.Child("nested"))...)

	// field T1.PointerStruct
	errs = append(errs,
		func(obj *struct{ Field string }, fldPath *field.Path) (errs field.ErrorList) {
			// field struct{Field string}.Field
			errs = append(errs,
				func(obj string, fldPath *field.Path) (errs field.ErrorList) {
					errs = append(errs, validate.FixedResult(fldPath, obj, true, "inner T1.PointerStruct.Field")...)
					return
				}(obj.Field, fldPath.Child("field"))...)

			return
		}(obj.PointerStruct, fldPath.Child("pointerStruct"))...)

	// field T1.NoValidation has no validation
	return errs
}
