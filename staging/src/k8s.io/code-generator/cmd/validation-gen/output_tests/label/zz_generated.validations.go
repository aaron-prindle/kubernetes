//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by validation-gen. DO NOT EDIT.

package label

import (
	fmt "fmt"

	operation "k8s.io/apimachinery/pkg/api/operation"
	safe "k8s.io/apimachinery/pkg/api/safe"
	validate "k8s.io/apimachinery/pkg/api/validate"
	field "k8s.io/apimachinery/pkg/util/validation/field"
	testscheme "k8s.io/code-generator/cmd/validation-gen/testscheme"
)

func init() { localSchemeBuilder.Register(RegisterValidations) }

// RegisterValidations adds validation functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterValidations(scheme *testscheme.Scheme) error {
	scheme.AddValidationFunc((*JobExample)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_JobExample(opCtx, obj.(*JobExample), safe.Cast[*JobExample](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*ReplicaSetExample)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ReplicaSetExample(opCtx, obj.(*ReplicaSetExample), safe.Cast[*ReplicaSetExample](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	return nil
}

func Validate_JobExample(opCtx operation.Context, obj, oldObj *JobExample, fldPath *field.Path) (errs field.ErrorList) {
	// type JobExample
	errs = append(errs, validate.ValidateLabelConsistency(opCtx, fldPath, obj, oldObj, "controller-uid", "UID", true)...)
	errs = append(errs, validate.ValidateLabelConsistency(opCtx, fldPath, obj, oldObj, "job-name", "Name", true)...)

	// field JobExample.TypeMeta has no validation
	// field JobExample.Name has no validation
	// field JobExample.UID has no validation
	// field JobExample.Template has no validation
	// field JobExample.Metadata has no validation
	return errs
}

func Validate_ReplicaSetExample(opCtx operation.Context, obj, oldObj *ReplicaSetExample, fldPath *field.Path) (errs field.ErrorList) {
	// type ReplicaSetExample
	errs = append(errs, validate.ValidateLabelConsistency(opCtx, fldPath, obj, oldObj, "app", "SelectorMatchLabel", true)...)

	// field ReplicaSetExample.TypeMeta has no validation
	// field ReplicaSetExample.SelectorMatchLabel has no validation
	// field ReplicaSetExample.Template has no validation
	// field ReplicaSetExample.Metadata has no validation
	return errs
}
