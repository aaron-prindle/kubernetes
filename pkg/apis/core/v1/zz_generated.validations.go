//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by validation-gen. DO NOT EDIT.

package v1

import (
	fmt "fmt"

	corev1 "k8s.io/api/core/v1"
	operation "k8s.io/apimachinery/pkg/api/operation"
	safe "k8s.io/apimachinery/pkg/api/safe"
	runtime "k8s.io/apimachinery/pkg/runtime"
	field "k8s.io/apimachinery/pkg/util/validation/field"
)

func init() { localSchemeBuilder.Register(RegisterValidations) }

// RegisterValidations adds validation functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterValidations(scheme *runtime.Scheme) error {
	scheme.AddValidationFunc((*corev1.Binding)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Binding(opCtx, obj.(*corev1.Binding), safe.Cast[*corev1.Binding](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.ComponentStatus)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ComponentStatus(opCtx, obj.(*corev1.ComponentStatus), safe.Cast[*corev1.ComponentStatus](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.ComponentStatusList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ComponentStatusList(opCtx, obj.(*corev1.ComponentStatusList), safe.Cast[*corev1.ComponentStatusList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.ConfigMap)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ConfigMap(opCtx, obj.(*corev1.ConfigMap), safe.Cast[*corev1.ConfigMap](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.ConfigMapList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ConfigMapList(opCtx, obj.(*corev1.ConfigMapList), safe.Cast[*corev1.ConfigMapList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.Endpoints)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Endpoints(opCtx, obj.(*corev1.Endpoints), safe.Cast[*corev1.Endpoints](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.EndpointsList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_EndpointsList(opCtx, obj.(*corev1.EndpointsList), safe.Cast[*corev1.EndpointsList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.Event)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Event(opCtx, obj.(*corev1.Event), safe.Cast[*corev1.Event](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.EventList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_EventList(opCtx, obj.(*corev1.EventList), safe.Cast[*corev1.EventList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.LimitRange)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_LimitRange(opCtx, obj.(*corev1.LimitRange), safe.Cast[*corev1.LimitRange](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.LimitRangeList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_LimitRangeList(opCtx, obj.(*corev1.LimitRangeList), safe.Cast[*corev1.LimitRangeList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.List)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_List(opCtx, obj.(*corev1.List), safe.Cast[*corev1.List](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.Namespace)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Namespace(opCtx, obj.(*corev1.Namespace), safe.Cast[*corev1.Namespace](oldObj), nil)
		}
		if len(subresources) == 1 && subresources[0] == "status" {
			return nil // corev1.NamespaceStatus has no validation
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.NamespaceList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_NamespaceList(opCtx, obj.(*corev1.NamespaceList), safe.Cast[*corev1.NamespaceList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.Node)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Node(opCtx, obj.(*corev1.Node), safe.Cast[*corev1.Node](oldObj), nil)
		}
		if len(subresources) == 1 && subresources[0] == "status" {
			return nil // corev1.NodeStatus has no validation
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.NodeList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_NodeList(opCtx, obj.(*corev1.NodeList), safe.Cast[*corev1.NodeList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.NodeProxyOptions)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_NodeProxyOptions(opCtx, obj.(*corev1.NodeProxyOptions), safe.Cast[*corev1.NodeProxyOptions](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.PersistentVolume)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PersistentVolume(opCtx, obj.(*corev1.PersistentVolume), safe.Cast[*corev1.PersistentVolume](oldObj), nil)
		}
		if len(subresources) == 1 && subresources[0] == "status" {
			return nil // corev1.PersistentVolumeStatus has no validation
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.PersistentVolumeClaim)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PersistentVolumeClaim(opCtx, obj.(*corev1.PersistentVolumeClaim), safe.Cast[*corev1.PersistentVolumeClaim](oldObj), nil)
		}
		if len(subresources) == 1 && subresources[0] == "status" {
			return nil // corev1.PersistentVolumeClaimStatus has no validation
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.PersistentVolumeClaimList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PersistentVolumeClaimList(opCtx, obj.(*corev1.PersistentVolumeClaimList), safe.Cast[*corev1.PersistentVolumeClaimList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.PersistentVolumeList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PersistentVolumeList(opCtx, obj.(*corev1.PersistentVolumeList), safe.Cast[*corev1.PersistentVolumeList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.Pod)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Pod(opCtx, obj.(*corev1.Pod), safe.Cast[*corev1.Pod](oldObj), nil)
		}
		if len(subresources) == 1 && subresources[0] == "status" {
			return nil // corev1.PodStatus has no validation
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.PodAttachOptions)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodAttachOptions(opCtx, obj.(*corev1.PodAttachOptions), safe.Cast[*corev1.PodAttachOptions](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.PodExecOptions)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodExecOptions(opCtx, obj.(*corev1.PodExecOptions), safe.Cast[*corev1.PodExecOptions](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.PodList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodList(opCtx, obj.(*corev1.PodList), safe.Cast[*corev1.PodList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.PodLogOptions)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodLogOptions(opCtx, obj.(*corev1.PodLogOptions), safe.Cast[*corev1.PodLogOptions](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.PodPortForwardOptions)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodPortForwardOptions(opCtx, obj.(*corev1.PodPortForwardOptions), safe.Cast[*corev1.PodPortForwardOptions](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.PodProxyOptions)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodProxyOptions(opCtx, obj.(*corev1.PodProxyOptions), safe.Cast[*corev1.PodProxyOptions](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.PodStatusResult)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodStatusResult(opCtx, obj.(*corev1.PodStatusResult), safe.Cast[*corev1.PodStatusResult](oldObj), nil)
		}
		if len(subresources) == 1 && subresources[0] == "status" {
			return nil // corev1.PodStatus has no validation
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.PodTemplate)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodTemplate(opCtx, obj.(*corev1.PodTemplate), safe.Cast[*corev1.PodTemplate](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.PodTemplateList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodTemplateList(opCtx, obj.(*corev1.PodTemplateList), safe.Cast[*corev1.PodTemplateList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.RangeAllocation)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_RangeAllocation(opCtx, obj.(*corev1.RangeAllocation), safe.Cast[*corev1.RangeAllocation](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.ReplicationController)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ReplicationController(opCtx, obj.(*corev1.ReplicationController), safe.Cast[*corev1.ReplicationController](oldObj), nil)
		}
		if len(subresources) == 1 && subresources[0] == "status" {
			return nil // corev1.ReplicationControllerStatus has no validation
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.ReplicationControllerList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ReplicationControllerList(opCtx, obj.(*corev1.ReplicationControllerList), safe.Cast[*corev1.ReplicationControllerList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.ResourceQuota)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ResourceQuota(opCtx, obj.(*corev1.ResourceQuota), safe.Cast[*corev1.ResourceQuota](oldObj), nil)
		}
		if len(subresources) == 1 && subresources[0] == "status" {
			return nil // corev1.ResourceQuotaStatus has no validation
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.ResourceQuotaList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ResourceQuotaList(opCtx, obj.(*corev1.ResourceQuotaList), safe.Cast[*corev1.ResourceQuotaList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.Secret)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Secret(opCtx, obj.(*corev1.Secret), safe.Cast[*corev1.Secret](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.SecretList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_SecretList(opCtx, obj.(*corev1.SecretList), safe.Cast[*corev1.SecretList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.SerializedReference)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_SerializedReference(opCtx, obj.(*corev1.SerializedReference), safe.Cast[*corev1.SerializedReference](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.Service)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Service(opCtx, obj.(*corev1.Service), safe.Cast[*corev1.Service](oldObj), nil)
		}
		if len(subresources) == 1 && subresources[0] == "status" {
			return nil // corev1.ServiceStatus has no validation
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.ServiceAccount)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ServiceAccount(opCtx, obj.(*corev1.ServiceAccount), safe.Cast[*corev1.ServiceAccount](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.ServiceAccountList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ServiceAccountList(opCtx, obj.(*corev1.ServiceAccountList), safe.Cast[*corev1.ServiceAccountList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.ServiceList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ServiceList(opCtx, obj.(*corev1.ServiceList), safe.Cast[*corev1.ServiceList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*corev1.ServiceProxyOptions)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ServiceProxyOptions(opCtx, obj.(*corev1.ServiceProxyOptions), safe.Cast[*corev1.ServiceProxyOptions](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	return nil
}

func Validate_Binding(opCtx operation.Context, obj, oldObj *corev1.Binding, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.Binding.TypeMeta has no validation
	// field corev1.Binding.ObjectMeta has no validation
	// field corev1.Binding.Target has no validation
	return errs
}

func Validate_ComponentStatus(opCtx operation.Context, obj, oldObj *corev1.ComponentStatus, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.ComponentStatus.TypeMeta has no validation
	// field corev1.ComponentStatus.ObjectMeta has no validation
	// field corev1.ComponentStatus.Conditions has no validation
	return errs
}

func Validate_ComponentStatusList(opCtx operation.Context, obj, oldObj *corev1.ComponentStatusList, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.ComponentStatusList.TypeMeta has no validation
	// field corev1.ComponentStatusList.ListMeta has no validation
	// field corev1.ComponentStatusList.Items has no validation
	return errs
}

func Validate_ConfigMap(opCtx operation.Context, obj, oldObj *corev1.ConfigMap, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.ConfigMap.TypeMeta has no validation
	// field corev1.ConfigMap.ObjectMeta has no validation
	// field corev1.ConfigMap.Immutable has no validation
	// field corev1.ConfigMap.Data has no validation
	// field corev1.ConfigMap.BinaryData has no validation
	return errs
}

func Validate_ConfigMapList(opCtx operation.Context, obj, oldObj *corev1.ConfigMapList, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.ConfigMapList.TypeMeta has no validation
	// field corev1.ConfigMapList.ListMeta has no validation
	// field corev1.ConfigMapList.Items has no validation
	return errs
}

func Validate_Endpoints(opCtx operation.Context, obj, oldObj *corev1.Endpoints, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.Endpoints.TypeMeta has no validation
	// field corev1.Endpoints.ObjectMeta has no validation
	// field corev1.Endpoints.Subsets has no validation
	return errs
}

func Validate_EndpointsList(opCtx operation.Context, obj, oldObj *corev1.EndpointsList, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.EndpointsList.TypeMeta has no validation
	// field corev1.EndpointsList.ListMeta has no validation
	// field corev1.EndpointsList.Items has no validation
	return errs
}

func Validate_Event(opCtx operation.Context, obj, oldObj *corev1.Event, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.Event.TypeMeta has no validation
	// field corev1.Event.ObjectMeta has no validation
	// field corev1.Event.InvolvedObject has no validation
	// field corev1.Event.Reason has no validation
	// field corev1.Event.Message has no validation
	// field corev1.Event.Source has no validation
	// field corev1.Event.FirstTimestamp has no validation
	// field corev1.Event.LastTimestamp has no validation
	// field corev1.Event.Count has no validation
	// field corev1.Event.Type has no validation
	// field corev1.Event.EventTime has no validation
	// field corev1.Event.Series has no validation
	// field corev1.Event.Action has no validation
	// field corev1.Event.Related has no validation
	// field corev1.Event.ReportingController has no validation
	// field corev1.Event.ReportingInstance has no validation
	return errs
}

func Validate_EventList(opCtx operation.Context, obj, oldObj *corev1.EventList, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.EventList.TypeMeta has no validation
	// field corev1.EventList.ListMeta has no validation
	// field corev1.EventList.Items has no validation
	return errs
}

func Validate_LimitRange(opCtx operation.Context, obj, oldObj *corev1.LimitRange, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.LimitRange.TypeMeta has no validation
	// field corev1.LimitRange.ObjectMeta has no validation
	// field corev1.LimitRange.Spec has no validation
	return errs
}

func Validate_LimitRangeList(opCtx operation.Context, obj, oldObj *corev1.LimitRangeList, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.LimitRangeList.TypeMeta has no validation
	// field corev1.LimitRangeList.ListMeta has no validation
	// field corev1.LimitRangeList.Items has no validation
	return errs
}

func Validate_List(opCtx operation.Context, obj, oldObj *corev1.List, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.List.TypeMeta has no validation
	// field corev1.List.ListMeta has no validation

	// field corev1.List.Items
	errs = append(errs,
		func(obj, oldObj []runtime.RawExtension, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *runtime.RawExtension, fldPath *field.Path) (errs field.ErrorList) {
						// NOTE: Type runtime.RawExtension is in a non-included package.
						//       Any validations defined on this type are not available from here.
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Items, safe.Field(oldObj, func(oldObj *corev1.List) []runtime.RawExtension { return oldObj.Items }), fldPath.Child("items"))...)

	return errs
}

func Validate_Namespace(opCtx operation.Context, obj, oldObj *corev1.Namespace, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.Namespace.TypeMeta has no validation
	// field corev1.Namespace.ObjectMeta has no validation
	// field corev1.Namespace.Spec has no validation
	// field corev1.Namespace.Status has no validation
	return errs
}

func Validate_NamespaceList(opCtx operation.Context, obj, oldObj *corev1.NamespaceList, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.NamespaceList.TypeMeta has no validation
	// field corev1.NamespaceList.ListMeta has no validation
	// field corev1.NamespaceList.Items has no validation
	return errs
}

func Validate_Node(opCtx operation.Context, obj, oldObj *corev1.Node, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.Node.TypeMeta has no validation
	// field corev1.Node.ObjectMeta has no validation
	// field corev1.Node.Spec has no validation
	// field corev1.Node.Status has no validation
	return errs
}

func Validate_NodeList(opCtx operation.Context, obj, oldObj *corev1.NodeList, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.NodeList.TypeMeta has no validation
	// field corev1.NodeList.ListMeta has no validation
	// field corev1.NodeList.Items has no validation
	return errs
}

func Validate_NodeProxyOptions(opCtx operation.Context, obj, oldObj *corev1.NodeProxyOptions, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.NodeProxyOptions.TypeMeta has no validation
	// field corev1.NodeProxyOptions.Path has no validation
	return errs
}

func Validate_PersistentVolume(opCtx operation.Context, obj, oldObj *corev1.PersistentVolume, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.PersistentVolume.TypeMeta has no validation
	// field corev1.PersistentVolume.ObjectMeta has no validation
	// field corev1.PersistentVolume.Spec has no validation
	// field corev1.PersistentVolume.Status has no validation
	return errs
}

func Validate_PersistentVolumeClaim(opCtx operation.Context, obj, oldObj *corev1.PersistentVolumeClaim, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.PersistentVolumeClaim.TypeMeta has no validation
	// field corev1.PersistentVolumeClaim.ObjectMeta has no validation
	// field corev1.PersistentVolumeClaim.Spec has no validation
	// field corev1.PersistentVolumeClaim.Status has no validation
	return errs
}

func Validate_PersistentVolumeClaimList(opCtx operation.Context, obj, oldObj *corev1.PersistentVolumeClaimList, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.PersistentVolumeClaimList.TypeMeta has no validation
	// field corev1.PersistentVolumeClaimList.ListMeta has no validation
	// field corev1.PersistentVolumeClaimList.Items has no validation
	return errs
}

func Validate_PersistentVolumeList(opCtx operation.Context, obj, oldObj *corev1.PersistentVolumeList, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.PersistentVolumeList.TypeMeta has no validation
	// field corev1.PersistentVolumeList.ListMeta has no validation
	// field corev1.PersistentVolumeList.Items has no validation
	return errs
}

func Validate_Pod(opCtx operation.Context, obj, oldObj *corev1.Pod, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.Pod.TypeMeta has no validation
	// field corev1.Pod.ObjectMeta has no validation
	// field corev1.Pod.Spec has no validation
	// field corev1.Pod.Status has no validation
	return errs
}

func Validate_PodAttachOptions(opCtx operation.Context, obj, oldObj *corev1.PodAttachOptions, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.PodAttachOptions.TypeMeta has no validation
	// field corev1.PodAttachOptions.Stdin has no validation
	// field corev1.PodAttachOptions.Stdout has no validation
	// field corev1.PodAttachOptions.Stderr has no validation
	// field corev1.PodAttachOptions.TTY has no validation
	// field corev1.PodAttachOptions.Container has no validation
	return errs
}

func Validate_PodExecOptions(opCtx operation.Context, obj, oldObj *corev1.PodExecOptions, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.PodExecOptions.TypeMeta has no validation
	// field corev1.PodExecOptions.Stdin has no validation
	// field corev1.PodExecOptions.Stdout has no validation
	// field corev1.PodExecOptions.Stderr has no validation
	// field corev1.PodExecOptions.TTY has no validation
	// field corev1.PodExecOptions.Container has no validation
	// field corev1.PodExecOptions.Command has no validation
	return errs
}

func Validate_PodList(opCtx operation.Context, obj, oldObj *corev1.PodList, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.PodList.TypeMeta has no validation
	// field corev1.PodList.ListMeta has no validation
	// field corev1.PodList.Items has no validation
	return errs
}

func Validate_PodLogOptions(opCtx operation.Context, obj, oldObj *corev1.PodLogOptions, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.PodLogOptions.TypeMeta has no validation
	// field corev1.PodLogOptions.Container has no validation
	// field corev1.PodLogOptions.Follow has no validation
	// field corev1.PodLogOptions.Previous has no validation
	// field corev1.PodLogOptions.SinceSeconds has no validation
	// field corev1.PodLogOptions.SinceTime has no validation
	// field corev1.PodLogOptions.Timestamps has no validation
	// field corev1.PodLogOptions.TailLines has no validation
	// field corev1.PodLogOptions.LimitBytes has no validation
	// field corev1.PodLogOptions.InsecureSkipTLSVerifyBackend has no validation
	return errs
}

func Validate_PodPortForwardOptions(opCtx operation.Context, obj, oldObj *corev1.PodPortForwardOptions, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.PodPortForwardOptions.TypeMeta has no validation
	// field corev1.PodPortForwardOptions.Ports has no validation
	return errs
}

func Validate_PodProxyOptions(opCtx operation.Context, obj, oldObj *corev1.PodProxyOptions, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.PodProxyOptions.TypeMeta has no validation
	// field corev1.PodProxyOptions.Path has no validation
	return errs
}

func Validate_PodStatusResult(opCtx operation.Context, obj, oldObj *corev1.PodStatusResult, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.PodStatusResult.TypeMeta has no validation
	// field corev1.PodStatusResult.ObjectMeta has no validation
	// field corev1.PodStatusResult.Status has no validation
	return errs
}

func Validate_PodTemplate(opCtx operation.Context, obj, oldObj *corev1.PodTemplate, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.PodTemplate.TypeMeta has no validation
	// field corev1.PodTemplate.ObjectMeta has no validation
	// field corev1.PodTemplate.Template has no validation
	return errs
}

func Validate_PodTemplateList(opCtx operation.Context, obj, oldObj *corev1.PodTemplateList, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.PodTemplateList.TypeMeta has no validation
	// field corev1.PodTemplateList.ListMeta has no validation
	// field corev1.PodTemplateList.Items has no validation
	return errs
}

func Validate_RangeAllocation(opCtx operation.Context, obj, oldObj *corev1.RangeAllocation, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.RangeAllocation.TypeMeta has no validation
	// field corev1.RangeAllocation.ObjectMeta has no validation
	// field corev1.RangeAllocation.Range has no validation
	// field corev1.RangeAllocation.Data has no validation
	return errs
}

func Validate_ReplicationController(opCtx operation.Context, obj, oldObj *corev1.ReplicationController, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.ReplicationController.TypeMeta has no validation
	// field corev1.ReplicationController.ObjectMeta has no validation
	// field corev1.ReplicationController.Spec has no validation
	// field corev1.ReplicationController.Status has no validation
	return errs
}

func Validate_ReplicationControllerList(opCtx operation.Context, obj, oldObj *corev1.ReplicationControllerList, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.ReplicationControllerList.TypeMeta has no validation
	// field corev1.ReplicationControllerList.ListMeta has no validation
	// field corev1.ReplicationControllerList.Items has no validation
	return errs
}

func Validate_ResourceQuota(opCtx operation.Context, obj, oldObj *corev1.ResourceQuota, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.ResourceQuota.TypeMeta has no validation
	// field corev1.ResourceQuota.ObjectMeta has no validation
	// field corev1.ResourceQuota.Spec has no validation
	// field corev1.ResourceQuota.Status has no validation
	return errs
}

func Validate_ResourceQuotaList(opCtx operation.Context, obj, oldObj *corev1.ResourceQuotaList, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.ResourceQuotaList.TypeMeta has no validation
	// field corev1.ResourceQuotaList.ListMeta has no validation
	// field corev1.ResourceQuotaList.Items has no validation
	return errs
}

func Validate_Secret(opCtx operation.Context, obj, oldObj *corev1.Secret, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.Secret.TypeMeta has no validation
	// field corev1.Secret.ObjectMeta has no validation
	// field corev1.Secret.Immutable has no validation
	// field corev1.Secret.Data has no validation
	// field corev1.Secret.StringData has no validation
	// field corev1.Secret.Type has no validation
	return errs
}

func Validate_SecretList(opCtx operation.Context, obj, oldObj *corev1.SecretList, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.SecretList.TypeMeta has no validation
	// field corev1.SecretList.ListMeta has no validation
	// field corev1.SecretList.Items has no validation
	return errs
}

func Validate_SerializedReference(opCtx operation.Context, obj, oldObj *corev1.SerializedReference, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.SerializedReference.TypeMeta has no validation
	// field corev1.SerializedReference.Reference has no validation
	return errs
}

func Validate_Service(opCtx operation.Context, obj, oldObj *corev1.Service, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.Service.TypeMeta has no validation
	// field corev1.Service.ObjectMeta has no validation
	// field corev1.Service.Spec has no validation
	// field corev1.Service.Status has no validation
	return errs
}

func Validate_ServiceAccount(opCtx operation.Context, obj, oldObj *corev1.ServiceAccount, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.ServiceAccount.TypeMeta has no validation
	// field corev1.ServiceAccount.ObjectMeta has no validation
	// field corev1.ServiceAccount.Secrets has no validation
	// field corev1.ServiceAccount.ImagePullSecrets has no validation
	// field corev1.ServiceAccount.AutomountServiceAccountToken has no validation
	return errs
}

func Validate_ServiceAccountList(opCtx operation.Context, obj, oldObj *corev1.ServiceAccountList, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.ServiceAccountList.TypeMeta has no validation
	// field corev1.ServiceAccountList.ListMeta has no validation
	// field corev1.ServiceAccountList.Items has no validation
	return errs
}

func Validate_ServiceList(opCtx operation.Context, obj, oldObj *corev1.ServiceList, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.ServiceList.TypeMeta has no validation
	// field corev1.ServiceList.ListMeta has no validation
	// field corev1.ServiceList.Items has no validation
	return errs
}

func Validate_ServiceProxyOptions(opCtx operation.Context, obj, oldObj *corev1.ServiceProxyOptions, fldPath *field.Path) (errs field.ErrorList) {
	// field corev1.ServiceProxyOptions.TypeMeta has no validation
	// field corev1.ServiceProxyOptions.Path has no validation
	return errs
}
